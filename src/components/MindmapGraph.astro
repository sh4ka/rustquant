---
interface Props {
  articles: Array<{
    id: string;
    slug: string;
    data: {
      title: string;
      mindmapBranch?: string;
      concepts?: string[];
      relatedArticles?: string[];
      prerequisites?: string[];
      difficulty?: "beginner" | "intermediate" | "advanced";
      tags?: string[];
    };
  }>;
  currentArticleSlug?: string;
  width?: number;
  height?: number;
}

const { articles, currentArticleSlug, width = 800, height = 600 } = Astro.props;

// Generate unique ID for this graph instance
const graphId = `mindmap-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="mindmap-container">
  <div id={graphId} class="mindmap-graph"></div>
</div>

<!-- Load D3 from CDN -->
<script src="https://d3js.org/d3.v7.min.js"></script>

<style>
  .mindmap-container {
    width: 100%;
    height: 100%;
    overflow: hidden;
    border: 1px solid #e1e5e9;
    border-radius: 8px;
    background: #fafbfc;
  }

  .mindmap-graph {
    width: 100%;
    height: 100%;
  }

  :global(.node) {
    cursor: pointer;
    transition: all 0.3s ease;
  }

  :global(.node:hover) {
    transform: scale(1.1);
  }

  :global(.node circle) {
    stroke: #fff;
    stroke-width: 2px;
  }

  :global(.node.current) {
    filter: drop-shadow(0 0 8px rgba(59, 130, 246, 0.5));
  }

  :global(.node.architecture circle) { fill: #3b82f6; }
  :global(.node.performance circle) { fill: #ef4444; }
  :global(.node.components circle) { fill: #10b981; }
  :global(.node.foundations circle) { fill: #f59e0b; }

  :global(.link) {
    fill: none;
    stroke: #94a3b8;
    stroke-width: 1.5px;
    opacity: 0.6;
  }

  :global(.link.related) {
    stroke: #3b82f6;
    stroke-dasharray: 5,5;
  }

  :global(.link.prerequisite) {
    stroke: #ef4444;
    marker-end: url(#arrowhead);
  }

  :global(.node text) {
    font: 12px sans-serif;
    text-anchor: middle;
    fill: #1f2937;
    pointer-events: none;
  }

  :global(.tooltip) {
    position: absolute;
    padding: 8px 12px;
    background: rgba(0, 0, 0, 0.9);
    color: white;
    border-radius: 6px;
    font-size: 12px;
    pointer-events: none;
    z-index: 1000;
    max-width: 200px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    line-height: 1.4;
  }
</style>

<script define:vars={{ articles, currentArticleSlug, graphId, width, height }}>
  // Wait for D3 to be available and initialize the mindmap
  function initializeMindmap() {
    if (typeof window !== 'undefined' && window.d3) {
      createMindmapGraph(window.d3);
    } else {
      // Retry after a short delay if D3 is not loaded yet
      setTimeout(initializeMindmap, 100);
    }
  }
  
  // Start initialization
  initializeMindmap();

  // Global variables for filtering
  let currentSimulation = null;
  let currentNodes = null;
  let currentLinks = null;
  let currentSvg = null;

  function createMindmapGraph(d3) {
    const container = document.getElementById(graphId);
    if (!container) return;

    // Clear any existing content
    container.innerHTML = '';

    // Process articles into nodes and links
    const nodes = articles.map(article => ({
      id: article.slug,
      title: article.data.title,
      branch: article.data.mindmapBranch || 'foundations',
      difficulty: article.data.difficulty || 'beginner',
      concepts: article.data.concepts || [],
      current: article.slug === currentArticleSlug,
      url: `/blog/${article.slug}/`
    }));

    const links = [];

    // Create links based on relationships
    articles.forEach(article => {
      if (article.data.relatedArticles) {
        article.data.relatedArticles.forEach(relatedSlug => {
          if (articles.find(a => a.slug === relatedSlug)) {
            links.push({
              source: article.slug,
              target: relatedSlug,
              type: 'related'
            });
          }
        });
      }

      if (article.data.prerequisites) {
        article.data.prerequisites.forEach(prereqSlug => {
          if (articles.find(a => a.slug === prereqSlug)) {
            links.push({
              source: prereqSlug,
              target: article.slug,
              type: 'prerequisite'
            });
          }
        });
      }
    });

    // Create SVG
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [0, 0, width, height])
      .style('max-width', '100%')
      .style('height', 'auto');

    // Add arrow marker for prerequisites
    const defs = svg.append('defs');
    defs.append('marker')
      .attr('id', 'arrowhead')
      .attr('viewBox', '0 -5 10 10')
      .attr('refX', 25)
      .attr('refY', 0)
      .attr('orient', 'auto')
      .attr('markerWidth', 6)
      .attr('markerHeight', 6)
      .append('path')
      .attr('d', 'M0,-5L10,0L0,5')
      .attr('fill', '#ef4444');

    // Create tooltip
    const tooltip = d3.select('body').append('div')
      .attr('class', 'tooltip')
      .style('opacity', 0);

    // Store references for filtering
    currentNodes = nodes;
    currentLinks = links;
    currentSvg = svg;

    // Create force simulation but stop it immediately after initial positioning
    const simulation = d3.forceSimulation(nodes)
      .force('link', d3.forceLink(links).id(d => d.id).distance(80).strength(0.5))
      .force('charge', d3.forceManyBody().strength(-200))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collision', d3.forceCollide().radius(30).strength(0.8))
      .alphaDecay(0.1) // Fast settling
      .velocityDecay(0.8); // High damping
    
    currentSimulation = simulation;

    // Stop simulation after initial layout (about 1 second)
    setTimeout(() => {
      simulation.stop();
      // Fix all nodes in their current positions
      nodes.forEach(node => {
        node.fx = node.x;
        node.fy = node.y;
      });
    }, 1000);

    // Create links
    const link = svg.append('g')
      .selectAll('line')
      .data(links)
      .join('line')
      .attr('class', d => `link ${d.type}`);

    // Create nodes
    const node = svg.append('g')
      .selectAll('g')
      .data(nodes)
      .join('g')
      .attr('class', d => `node ${d.branch} ${d.current ? 'current' : ''}`)
      .call(d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));

    // Add circles to nodes
    node.append('circle')
      .attr('r', d => d.current ? 20 : 15)
      .attr('stroke-width', d => d.current ? 3 : 2);

    // Add text labels
    node.append('text')
      .text(d => d.title.length > 30 ? d.title.substring(0, 30) + '...' : d.title)
      .attr('dy', 30)
      .style('font-size', '10px');

    // Add interactivity after layout is complete
    setTimeout(() => {
      node
        .on('mouseover', (event, d) => {
          // Get the container's bounding rectangle for proper positioning
          const containerRect = container.getBoundingClientRect();
          
          tooltip.transition().duration(200).style('opacity', 0.9);
          tooltip.html(`
            <strong>${d.title}</strong><br/>
            Branch: ${d.branch}<br/>
            Difficulty: ${d.difficulty}<br/>
            Concepts: ${d.concepts.join(', ') || 'None'}
          `)
          // Position tooltip relative to the node position
          .style('left', (containerRect.left + d.x + 40) + 'px')
          .style('top', (containerRect.top + d.y - 20) + 'px');
        })
        .on('mouseout', (event, d) => {
          tooltip.transition().duration(500).style('opacity', 0);
        })
        .on('click', (event, d) => {
          window.location.href = d.url;
        });
    }, 1500); // Add interaction after simulation is stopped

    // Update positions on simulation tick
    simulation.on('tick', () => {
      link
        .attr('x1', d => d.source.x)
        .attr('y1', d => d.source.y)
        .attr('x2', d => d.target.x)
        .attr('y2', d => d.target.y);

      node.attr('transform', d => `translate(${d.x},${d.y})`);
    });

    // Drag functions
    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
  }

  // Filtering functions
  window.filterBranch = function(branch) {
    if (!currentSvg || !currentNodes) return;

    // Update active button
    document.querySelectorAll('.control-button').forEach(btn => {
      btn.classList.remove('active');
    });
    event.target.classList.add('active');

    // Filter nodes and links based on branch
    const filteredNodes = branch === 'all' 
      ? currentNodes 
      : currentNodes.filter(node => node.branch.toLowerCase() === branch.toLowerCase());
    
    const filteredNodeIds = new Set(filteredNodes.map(n => n.id));
    const filteredLinks = currentLinks.filter(link => 
      filteredNodeIds.has(link.source.id || link.source) && 
      filteredNodeIds.has(link.target.id || link.target)
    );

    // Update visualization
    const nodeSelection = currentSvg.selectAll('.node').data(filteredNodes, d => d.id);
    const linkSelection = currentSvg.selectAll('.link').data(filteredLinks);

    // Hide/show nodes
    currentSvg.selectAll('.node').style('opacity', d => 
      filteredNodeIds.has(d.id) ? 1 : 0.1
    );

    // Hide/show links
    currentSvg.selectAll('.link').style('opacity', d => 
      filteredNodeIds.has(d.source.id || d.source) && 
      filteredNodeIds.has(d.target.id || d.target) ? 0.6 : 0.1
    );

    // Restart simulation with filtered nodes
    if (currentSimulation) {
      currentSimulation.nodes(filteredNodes);
      currentSimulation.force('link').links(filteredLinks);
      currentSimulation.alpha(0.3).restart();
    }
  };

  window.resetGraph = function() {
    if (!currentSvg || !currentNodes) return;

    // Reset all nodes and links to visible
    currentSvg.selectAll('.node').style('opacity', 1);
    currentSvg.selectAll('.link').style('opacity', 0.6);

    // Restart simulation with all nodes
    if (currentSimulation) {
      currentSimulation.nodes(currentNodes);
      currentSimulation.force('link').links(currentLinks);
      currentSimulation.alpha(0.3).restart();
    }

    // Reset active button
    document.querySelectorAll('.control-button').forEach(btn => {
      btn.classList.remove('active');
    });
    document.querySelector('.control-button').classList.add('active');
  };
</script>